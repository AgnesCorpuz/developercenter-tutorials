.tutorial{:data =>{:title=>'3rd Party Chat and Email Routing'}}
    .step{:data=>{:title=>'Introduction'}}
        :markdown
            Use cases can arise where there are entities external to PureCloud which need to be routed through PureCloud's ACD engine. The most common use case is with a CRM that supports email to case functionality and then the callcenter wants to ACD route that case to an available agent. Using [POST /api/v2/conversations/emails](/api/rest/v2/conversations/#postConversationsEmails) and [POST /api/v2/conversations/chats](/api/rest/v2/conversations/#postConversationsChats) it is now possible to create a representation of those external objects in PureCloud as email or chat objects.  This tutorial demonstrates routing an email, but the concepts also apply for a chat.
    .step{:data=>{:title=>'Initialize Queue or User Watcher'}}
        :markdown
            Depending on how your integration is setup, you will most likely have an app on the agent's desktop watching their queue for routed conversations and then performing actions such as a URL screen pop when a routed conversation comes into their queue. Here in the tutorial we are subscribing for queue events with ~v2.routing.queues.{queueid}.conversations.emails~ but the same can be done with user events ~v2.users.{userid}.conversations.emails~.  Using the .conversations.emails notification topic ensures that only email notifications are raised so you don't have to filter out phone conversations.
    .step{:data=>{:title=>'Create an Email'}}
        :markdown
            When creating the data for an email, the only required fields are queueId, which is the queue used to route the email and provider. The provider field is an arbitrary string value which identifies your routing integration. Native PureCloud emails and chats will have a provider of "PureCloud Email" and "PureCloud Webchat".

            The other fields on the email are optional but the from/to name can be used to display helpful information to the agent and the from/to address can be used to link to the external system.
    .step{:data=>{:title=>'Handling a Conversation Notification'}}
        :markdown
            When receiving a notification about a conversation, you'll want to get the details of the email or chat using the media type specific resource [GET /api/v2/conversations/emails/{emailId}](/api/rest/v2/conversations/#getConversationsEmailsEmailId) [GET /api/v2/conversations/chats/{chatId}](/api/rest/v2/conversations/#getConversationsChatsChatId).  Calling [GET /api/v2/conversations/{conversationId}](/api/rest/v2/conversations/#getConversationsConversationId) will not return the provider property off of the participant. Once we retrieve that property, we make sure it matches the provider of the integration so that we don't interfere with other routing integrations of core system functionality. Once we verify it matches, we can perform screen pop or other necessary operations.
