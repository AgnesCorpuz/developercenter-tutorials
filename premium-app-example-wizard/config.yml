---
title: Premium App Wizard
description: A template for premium app installer.
categories:
- Integrations
steps:
- title: Introduction
  content: |
    The wizard is a simple web app built to provision additional items in Genesys Cloud for use by the Premium App. This tutorial explores the sample Premium App Wizard installer and how partners can leverage it for their own Premium Apps. 

    The four most provisioned Genesys Cloud items are:

    * Roles that contain access to the Premium App.
    * Groups that can further filter acccess to the app.
    * OAuth Client that's normally passed to the app backend.
    * App Instances for additional widgets in the Genesys Cloud UI.

    The source for the project is at: https://github.com/MyPureCloud/purecloud-premium-app

- title: Configuration File
  content: |
    The config file contains everything that the partner needs to modify for use by their own premium app.

- title: Config File - Client IDs
  content: |
    The Client ID is a unique OAuth Implict Grant ID specifically for use by your premium app. This works across all regions.

- title: Config File - URLs
  content: |
    These are the public URLs for the wizard and for the actual premium app.

    Commented out are example URLs for testing.

- title: Config File - App Name
  content: |
    Once the Premium App is approved by the AppFoundry Team, this unique string id will be assigned to the premium app.

- title: Config File - Additional Configuration
  content: |
    Most of the time there'd be no need to modify these values but are provided to enable further customization.   

- title: Config File - Prefix
  content: |
    The prefix is appended to all the wizard-provisioned Genesys Cloud items. This provides a way to immediately identify them and is currently how the wizard tracks if the application is installed.

- title: Config File - Provisioning Info
  content: |
    The recipe for the provisioning process. This is where the items to be provisioned are defined. Each property of the provisiongInfo object is an array that further defines each instance of that object type. For this sample it only provisions one of each type.

- title: Validate Product Availability
  content: |
    The first step is to check whether the Genesys Cloud org has the product available. It does this by checking the if the appName (from the config file) is included in the available products for the org.

- title: Check Existing Items
  content: |
    The wizard next checks if the app is currently installed. This is determined by checking if any Genesys Cloud items contain the unique prefix defined in the config file. If there are, the wizard will redirect to the premium app URL, and if not, it will continue on with the provisioning process.

- title: Custom Setup Page
  content: |
    Some apps may require the user to login to their own system before the provisioning. This page can be modified by partners to contain their own code before the actual provisioning process.

- title: Create Items
  content: |
    The next step is to create the Genesys Cloud objects defined in the provisioningInfo.

    There's no need to actually modify the code contained in this file.

- title: Configure Items
  content: |
    Some items like Integrations has properties that can only be configured after they are created. Hence, after the creation step, there's an additional configuration step.

    Similar to the creation step, there's mostly no need to modify any of the code presented.

- title: Installed Data Summary
  content: |
    After a successful installation, a JSON summary of everything that was provisioned will be included in the Notes section of the original Integration instance. 

    Example: 
    ```
    {
        "role": {
            "Role": {
                "id": "3949e936-7d47-46a3-8537-76797ddaa50f",
                "name": "PREMIUM_EXAMPLE_Role"
            }
        },
        "group": {
            "Supervisors": {
                "id": "3eb84c57-ad1f-4e73-b136-bed9d5988b85",
                "name": "PREMIUM_EXAMPLE_Supervisors"
            }
        },
        "oauth-client": {
            "OAuth Client": {
                "id": "d58dd21e-83ee-4207-9e05-558a7ae336e5",
                "name": "PREMIUM_EXAMPLE_OAuth Client"
            }
        }
    }
    ```

- title: Deprovisioning
  content: |
    For testing purposes, the wizard has an uninstall function that deletes everything that was created by the wizard.

    In production however, this function is not recommended to be offered to clients.

languages: 
  javascript:
    displayName: Javascript
    steps:
    - file: "javascript/wizard.js"
      highlight: "1-215"
    - file: "javascript/_config.js"
      highlight: "1-90"
    - file: "javascript/_config.js"
      highlight: "2-2"
    - file: "javascript/_config.js"
      highlight: "4-9"
    - file: "javascript/_config.js"
      highlight: "11-13"
    - file: "javascript/_config.js"
      highlight: "15-29"
    - file: "javascript/_config.js"
      highlight: "30-31"
    - file: "javascript/_config.js"
      highlight: "33-89"
    - file: "javascript/main.js"
      highlight: "90-105"
    - file: "javascript/wizard.js"
      highlight: "98-121"
    - file: "javascript/custom-setup.html"
      highlight: "1-82"
    - file: "javascript/wizard.js"
      highlight: "128-144"
    - file: "javascript/wizard.js"
      highlight: "147-165"
    - file: "javascript/wizard.js"
      highlight: "183-196"
    - file: "javascript/wizard.js"
      highlight: "200-214"
